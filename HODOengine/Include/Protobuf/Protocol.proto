syntax = "proto3";
package Protocol;

import "Enum.proto";
import "Struct.proto";

// C -> S
message C_TEST
{
	int64 num = 1;
}

// S -> C
message S_TEST
{
	int64 num = 1;
}

message C_MOVE
{
	uint64 id = 1;
	uint32 pos = 2;
}

message S_ERROR
{
	int32 errorCode = 1;
}

message S_CONNECTED
{

}

message C_AUTOLOGIN
{

}

message C_SIGNIN
{
	string id = 1;
	string password = 2;
}

message S_SIGNIN_OK
{
	int32 uid = 1;
	string nickName = 2;
}

message C_SIGNUP
{
	string id = 1;
	string password = 2;
	string nickname = 3;
}

message S_SIGNUP_OK
{
}

message C_ROOM_CREATE
{
	string roomName = 1;
	string password = 2;

	int32 maxPlayerCount = 3;

	bool isPrivate = 4;
	bool isTeam = 5;

	int32 map = 6;
}

message C_ROOM_SETTING
{
	string roomName = 1;
	// Todo 아직 안만들어짐
	string password = 2;

	int32 maxPlayerCount = 3;

	bool isPrivate = 4;
	bool isTeam = 5;

	int32 map = 6;
}

message C_ROOM_ENTER
{
	string roomCode = 1;
	string password = 2;
}

message S_ROOM_ENTER
{
	RoomInfo roomInfo = 1;
}

message C_ROOM_LEAVE
{
	
}

message S_ROOM_LEAVE
{
	RoomInfo roomInfo = 1;
}

message S_ANOTHER_ENTER_ROOM
{
	RoomInfo roomInfo = 1;
}

message S_ANOTHER_LEAVE_ROOM
{
	RoomInfo roomInfo = 1;
}

message C_ROOM_START
{

}

message S_ROOM_START
{
	RoomInfo roomInfo = 1;
	GameRule gameRule = 2;
}

message S_GAME_START
{

}

message S_GAME_END
{
	RoomInfo roomInfo = 1;
}

message C_ROOM_CHANGE_TEAM
{
	eTeamColor teamColor = 1;
	string targetNickName = 2;
}

message S_ROOM_CHANGE_TEAM
{
	RoomInfo roomInfo = 1;
}

message C_ROOM_KICK
{
	string targetNickName = 1;
}

message S_ROOM_KICK
{
	RoomInfo roomInfo = 1;
}

message C_PLAY_UPDATE
{
	PlayerData playerData = 1;
}

message S_PLAY_UPDATE
{
	RoomInfo roomInfo = 1;

	repeated PlayerData playerData = 2;
}

message C_ROOM_LIST_REQUEST
{

}

message S_ROOM_LIST
{
	repeated RoomInfo roomInfo = 1;
}

message C_PLAY_JUMP
{
	PlayerData playerData = 1;
}

message S_PLAY_JUMP
{
	PlayerData playerData = 1;
}

message C_PLAY_SHOOT
{
	Transform transform = 1;
	
	uint64 hitTargetUid = 2;
	eHitLocation hitLocation = 3;
}

message S_PLAY_SHOOT
{
	PlayerData shootPlayer = 1;
	
	optional PlayerData hitPlayer = 2;
	optional eHitLocation hitLocation = 3;
}

message S_PLAY_KILL_DEATH
{
	PlayerData deathPlayer = 1;
	PlayerData killPlayer = 2;
}

message S_PLAY_RESPAWN
{
	PlayerData playerData = 1;
	// Todo Respawn Point
}